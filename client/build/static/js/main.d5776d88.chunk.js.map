{"version":3,"sources":["services/messages.js","reducers/messageReducer.js","components/MessageForm.js","components/Message.js","components/MessageList.js","reducers/socketReducer.js","components/SocketConnect.js","App.js","store.js","index.js"],"names":["getAll","a","axios","get","response","data","addNewMessage","newObject","post","initializeMessages","dispatch","messageService","messages","type","messageReducer","state","action","concat","mapDispachToProps","addMessage","message","newMessage","connect","socket","props","useState","setMessage","user","setUser","Header","as","Form","onSubmit","event","preventDefault","sentMessage","timeStamp","Date","send","Group","Field","width","Input","value","onChange","target","placeholder","Button","Message","messageAvatar","Comment","Avatar","src","Content","Responsive","Segment","basic","floated","minWidth","Metadata","toLocaleString","maxWidth","toDateString","Author","Text","Divider","clientCount","setClientCount","useEffect","on","count","messageAvatars","style","Grid","columns","Column","Subheader","textAlign","length","Dimmer","Dimmable","inverted","active","Loader","Placeholder","fluid","image","Line","map","key","id","Math","floor","random","connectSocket","disconnectSocket","socketReducer","socketIOClient","off","close","mapDispatchToProps","disconnect","refreshMessages","onClick","initMessages","Container","reducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5776d88.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/messages'\r\n\r\nconst getAll = async () => {\r\n\tconst response = await axios.get(baseUrl)\r\n\treturn response.data\r\n}\r\n\r\nconst addNewMessage = async newObject => {\r\n\tconst response = await axios.post(baseUrl, newObject)\r\n\treturn response.data\r\n}\r\n\r\nexport default { getAll, addNewMessage }","import messageService from '../services/messages'\r\n\r\nconst messageReducer = (state = [], action) => {\r\n\tswitch(action.type) {\r\n\t\tcase 'INIT_MESSAGES':\r\n\t\t\treturn action.data\r\n\t\tcase 'NEW_MESSAGE':\r\n\t\t\treturn state.concat(action.data)\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport const initializeMessages = () => {\r\n\treturn async dispatch => {\r\n\t\tconst messages = await messageService.getAll()\r\n\t\tdispatch({\r\n\t\t\ttype: 'INIT_MESSAGES',\r\n\t\t\tdata: messages\r\n\t\t})\r\n\t}\r\n}\r\n\r\nexport const newMessage = message => {\r\n\treturn async dispatch => {\r\n\t\tconst newMessage = await messageService.addNewMessage(message)\r\n\t\tdispatch({\r\n\t\t\ttype: 'NEW_MESSAGE',\r\n\t\t\tdata: newMessage\r\n\t\t})\r\n\t}\r\n}\r\n\r\nexport default messageReducer","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { newMessage } from '../reducers/messageReducer'\r\n\r\nimport { Header, Form, Button } from 'semantic-ui-react'\r\n\r\nconst MessageForm = (props) => {\r\n\tconst [message, setMessage] = useState('')\r\n\tconst [user, setUser] = useState('')\r\n\r\n\tconst handleAddMessage = (event) => {\r\n\t\tevent.preventDefault()\r\n\t\tconst sentMessage = {\r\n\t\t\tmessage: message,\r\n\t\t\ttimeStamp: new Date(),\r\n\t\t\tuser: user\r\n\t\t}\r\n\t\tprops.socket.send(sentMessage)\r\n\t\tprops.addMessage(sentMessage)\r\n\t\tsetMessage('')\r\n\t\tsetUser('')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header as=\"h3\">Send message:</Header>\r\n\t\t\t<Form onSubmit={handleAddMessage}>\r\n\t\t\t\t<Form.Group>\r\n\t\t\t\t\t<Form.Field width={11}>\r\n\t\t\t\t\t\t<label>Message</label>\r\n\t\t\t\t\t\t<Form.Input \r\n\t\t\t\t\t\t\tvalue={message} \r\n\t\t\t\t\t\t\tonChange={({target}) => setMessage(target.value)}\r\n\t\t\t\t\t\t\tplaceholder=\"Add a message...\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Form.Field>\r\n\t\t\t\t\t<Form.Field width={5}>\r\n\t\t\t\t\t\t<label>Sent by</label>\r\n\t\t\t\t\t\t<Form.Input\r\n\t\t\t\t\t\t\tvalue={user}\r\n\t\t\t\t\t\t\tonChange={({target}) => setUser(target.value)}\r\n\t\t\t\t\t\t\tplaceholder=\"Anonymous by default\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Form.Field>\r\n\t\t\t\t</Form.Group>\r\n\t\t\t\t<Button type=\"submit\">Send</Button>\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsocket: state.socket\r\n\t}\r\n}\r\n\r\nconst mapDispachToProps = {\r\n\taddMessage: newMessage\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(MessageForm)","import React from 'react'\r\n\r\nimport { Responsive, Segment, Divider, Comment } from 'semantic-ui-react'\r\n\r\nconst Message = ({ message, messageAvatar }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Comment >\r\n\t\t\t\t<Comment.Avatar src={messageAvatar} />\r\n\t\t\t\t<Comment.Content>\r\n\t\t\t\t\t<Responsive as={Segment} basic floated=\"right\" minWidth={400}>\r\n\t\t\t\t\t\t<Comment.Metadata>{new Date(message.timeStamp).toLocaleString()}</Comment.Metadata>\r\n\t\t\t\t\t</Responsive>\r\n\t\t\t\t\t<Responsive as={Segment} basic floated=\"right\" minWidth={350} maxWidth={399}>\r\n\t\t\t\t\t\t<Comment.Metadata>{new Date(message.timeStamp).toDateString()}</Comment.Metadata>\r\n\t\t\t\t\t</Responsive>\r\n\t\t\t\t\t<Comment.Author>{message.user}</Comment.Author>\r\n\t\t\t\t\t<Comment.Text>{message.message}</Comment.Text>\r\n\t\t\t\t</Comment.Content>\r\n\t\t\t</Comment>\r\n\t\t\t<Divider />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Message","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport Message from '../components/Message'\r\n\r\nimport { Segment, Header, Comment, Grid, Divider, Placeholder, Dimmer, Loader } from 'semantic-ui-react'\r\n\r\nconst MessageList = (props) => {\r\n\tconst [clientCount, setClientCount] = useState(0)\r\n\r\n\tconst socket = props.socket\r\n\r\n\tuseEffect(() => {\r\n\t\tif (socket !== null) {\r\n\t\t\tsocket.on(\"clientCount\", (count) => {\r\n\t\t\t\tsetClientCount(count)\r\n\t\t\t})\r\n\t\t}\r\n\t}, [socket])\r\n\r\n\tconst messageAvatars = [\r\n\t\t\"ade\",\r\n\t\t\"chris\",\r\n\t\t\"christian\",\r\n\t\t\"daniel\",\r\n\t\t\"elliot\",\r\n\t\t\"helen\",\r\n\t\t\"jenny\",\r\n\t\t\"joe\",\r\n\t\t\"justen\",\r\n\t\t\"laura\"\r\n\t]\r\n\r\n\treturn (\r\n\t\t<Segment>\r\n\t\t\t<Comment.Group style={{ maxWidth: \"100%\" }}> \r\n\t\t\t\t<Grid columns=\"equal\">\r\n\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t<Header as=\"h2\">Chat\r\n\t\t\t\t\t\t\t<Header.Subheader>Showing previous messages and real time</Header.Subheader>\r\n\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t\t<Grid.Column textAlign=\"right\">\r\n\t\t\t\t\t\t{socket === null ? '' : `Currently connected users: ${clientCount}`}\r\n\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Divider />\r\n\t\t\t\t{props.messages.length === 0 ?\r\n\t\t\t\t<Dimmer.Dimmable>\r\n\t\t\t\t\t<Dimmer inverted active>\r\n\t\t\t\t\t\t<Loader inverted>Loading</Loader>\r\n\t\t\t\t\t</Dimmer>\r\n\t\t\t\t\t<Placeholder fluid>\r\n\t\t\t\t\t\t<Placeholder.Header image>\r\n\t\t\t\t\t\t\t\t<Placeholder.Line />\r\n\t\t\t\t\t\t\t\t<Placeholder.Line />\r\n\t\t\t\t\t\t</Placeholder.Header>\r\n\t\t\t\t\t\t<Placeholder.Header image>\r\n\t\t\t\t\t\t\t\t<Placeholder.Line />\r\n\t\t\t\t\t\t\t\t<Placeholder.Line />\r\n\t\t\t\t\t\t</Placeholder.Header>\r\n\t\t\t\t\t</Placeholder>\r\n\t\t\t\t</Dimmer.Dimmable> :\r\n\t\t\t\tprops.messages.map(message =>\r\n\t\t\t\t<Message\r\n\t\t\t\t\tkey={message.id}\r\n\t\t\t\t\tmessage={message}\r\n\t\t\t\t\tmessageAvatar={`https://semantic-ui.com/images/avatar/large/${messageAvatars[Math.floor(Math.random() * messageAvatars.length)]}.jpg`}\r\n\t\t\t\t/>)}\r\n\t\t\t</Comment.Group>\r\n\t\t</Segment>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tmessages: state.messages,\r\n\t\tsocket: state.socket\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps)(MessageList)","import socketIOClient from 'socket.io-client'\r\n\r\nconst socketReducer = (state = null, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase 'CONNECT_SOCKET':\r\n\t\t\tconst socket = socketIOClient(\"https://incredible-chatapp.herokuapp.com/\")\r\n\t\t\treturn socket\r\n\t\tcase 'DISCONNECT_SOCKET':\r\n\t\t\tstate.off()\r\n\t\t\tstate.close()\r\n\t\t\treturn null\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport const connectSocket = () => {\r\n\treturn {\r\n\t\ttype: 'CONNECT_SOCKET'\r\n\t}\r\n}\r\n\r\nexport const disconnectSocket = () => {\r\n\treturn {\r\n\t\ttype: 'DISCONNECT_SOCKET'\r\n\t}\r\n}\r\n\r\nexport default socketReducer","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { connectSocket, disconnectSocket } from '../reducers/socketReducer'\r\nimport { initializeMessages } from '../reducers/messageReducer'\r\n\r\nimport { Button } from 'semantic-ui-react'\r\n\r\nconst SocketConnect = (props) => {\r\n\tconst socket = props.socket\r\n\r\n\tuseEffect(() => {\r\n\t\tif (socket !== null) {\r\n\t\t\tsocket.on(\"message\", () => {\r\n\t\t\t\tprops.refreshMessages()\r\n\t\t\t})\r\n\t\t}\r\n\t}, [socket])\r\n\r\n\treturn (\r\n\t\t<div> {socket === null ? \r\n\t\t\t<div>\r\n\t\t\t\t<p>Disconnected from the server</p>\r\n\t\t\t\t<Button onClick={props.connect}>Connect</Button>\r\n\t\t\t</div> :\r\n\t\t\t<div>\r\n\t\t\t\t<p>Connected to the server</p>\r\n\t\t\t\t<Button onClick={props.disconnect}>Disconnect</Button>\r\n\t\t\t</div>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsocket: state.socket\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n\tconnect: connectSocket,\r\n\tdisconnect: disconnectSocket,\r\n\trefreshMessages: initializeMessages\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketConnect)","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport MessageForm from './components/MessageForm'\r\nimport MessageList from './components/MessageList'\r\nimport SocketConnect from './components/SocketConnect'\r\n\r\nimport { connectSocket, disconnectSocket } from './reducers/socketReducer'\r\nimport { initializeMessages } from './reducers/messageReducer'\r\n\r\nimport { Container, Header, Divider } from 'semantic-ui-react'\r\n\r\nconst App = (props) => {\r\n\tuseEffect(() => {\r\n\t\tprops.initMessages()\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Header as=\"h1\" textAlign=\"center\">\r\n\t\t\t\tChat App\r\n\t\t\t\t<Header.Subheader>\r\n\t\t\t\t\tWelcome! Connect to chat to start!\r\n\t\t\t\t</Header.Subheader>\r\n\t\t\t</Header>\r\n\t\t\t<MessageList />\r\n\t\t\t{props.socket === null ? null :\r\n\t\t\t<div>\r\n\t\t\t\t<MessageForm />\r\n\t\t\t\t<Divider />\r\n\t\t\t</div> }\r\n\t\t\t<SocketConnect />\r\n\t\t</Container>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsocket: state.socket\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n\tconnect: connectSocket,\r\n\tdisconnect: disconnectSocket,\r\n\tinitMessages: initializeMessages\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport messageReducer from './reducers/messageReducer'\r\nimport socketReducer from './reducers/socketReducer'\r\n\r\nconst reducer = combineReducers({\r\n\tmessages: messageReducer,\r\n\tsocket: socketReducer\r\n})\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk))\r\n\r\nexport default store","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport App from './App'\r\nimport store from './store'\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n)"],"sourceRoot":""}